" sorry, vi!
set nocompatible

if filereadable("/usr/share/vim/google/google.vim")
  source /usr/share/vim/google/google.vim
endif
if filereadable("/usr/share/vim/google/glug/bootstrap.vim")
  source /usr/share/vim/google/glug/bootstrap.vim
endif

" set line numbers + relative line numbers
set relativenumber
set number

" use 256 color terminal
set t_Co=256

" Unicode erryday
scriptencoding utf-8
set encoding=utf-8
set fileencoding=utf-8

call plug#begin('~/.vim/plugged')

" Plug 'octol/vim-cpp-enhanced-highlight'
" Plug 'Valloric/YouCompleteMe'
Plug 'scrooloose/syntastic'

" airline, themes, and ability to export theme to tmux
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"Plug 'edkolev/tmuxline.vim'

Plug 'vivien/vim-linux-coding-style'

" Akaros (Mod of Linux coding style)
Plug 'hugelgupf/vim-akaros-coding-style'
Plug 'vivien/vim-linux-coding-style'

" distraction free
Plug 'junegunn/goyo.vim'

" distraction free - limelight
Plug 'junegunn/limelight.vim'

" color scheme
Plug 'junegunn/seoul256.vim'

" vim git gutter
Plug 'airblade/vim-gitgutter'
Plug 'LucHermitte/lh-vim-lib' | Plug 'LucHermitte/local_vimrc'

Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
Plug 'junegunn/fzf.vim'

call plug#end()

" Akaros style in akaros directory.
let g:akarossty_patterns = [ "/akaros" ]
let g:linuxsty_patterns = ["/prodkernel", "/linux"]

" Make , the prefix key instead of \
let mapleader = ","

" custom color scheme
" colors transparent
colo seoul256

if filereadable($HOME."/.vimrc.google")
  source ${HOME}/.vimrc.google
endif

" Show vim airline with a certain theme
"let g:airline_theme='zenburn'
let g:airline_theme='seoul256'
let g:airline#extensions#tabline#enabled = 1
" Always show status line
set laststatus=2

" Syntax Highlighting
syntax on

" Highlight searches and search as you type
set hls
set incsearch

" Turn of the damn bells
set noerrorbells
set vb
set t_vb=

set ruler

" Such indent
set autoindent
set cindent

" single space after period. we don't subscribe to double space bullshit.
set nojoinspaces

" Case sucks
set ignorecase
set smartcase

" Highlight current line
" set cursorline

" Cursor moves with 7 lines
set so=7

" Enable using the mouse
set mouse=a

" regex like grep
set magic

" Performance config
set lazyredraw

" Command line completion
set wildmenu
set wildmode=longest:full,full

" LaTeX stuff
let grepprg="grep -nH $*"
let g:tex_flavor = "latex"
let g:Tex_CompileRule_pdf = 'xelatex --interaction=nonstopmode -shell-escape $*'
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_MultipleCompileFormats = 'pdf'
let g:Tex_GotoError=0
let g:Tex_UseMakefile=0

let g:Tex_IgnoredWarnings =
  \"Underfull\n".
  \"Overfull\n".
  \"specifier changed to\n".
  \"You have requested\n".
  \"Missing number, treated as zero.\n".
  \"There were undefined references\n".
  \"Citation %.%# undefined\n".
  \"Double space found.\n".
  \"LaTeX Font Warning:"
let g:Tex_IgnoreLevel = 9

" keybindings for commenting
map <Leader>% :s/^/%/<CR>:nohl<CR>
map <Leader># :s/^/#/<CR>:nohl<CR>
map <Leader>" :s/^/"/<CR>:nohl<CR>
map <Leader>c :s/^\/\/\\|^--\\|^> \\|^[#"%!;]//<CR>:nohl<CR>

" Configure syntastic. Add ,l for running linter
let g:syntastic_always_populate_loc_list = 1
let g:syntatsic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" map ,l for linting
map <Leader>l :SyntasticCheck<CR>

map <Leader>k :Files<CR>
inoremap <C-T> <C-O>:Files<CR>
noremap <C-T> :Files<CR>

" other keybindings
map <Leader>h :nohl<CR>

" use ;; to be able to exit insert mode.
imap ;; <ESC>

map <Leader>ll :Limelight!!<CR>
map <Leader>g :Goyo<CR>

" Make limelight mandatory with goyo.
function! s:goyo_enter()
  Limelight
  set linebreak
endfunction

function! s:goyo_leave()
  Limelight!
  set nolinebreak
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" 2 soft space tabs
set tabstop=2
set shiftwidth=2
set expandtab
set smarttab

" Show spaces and tabs when useful
set list listchars=tab:»·,trail:·

" Columnwidth of 80; hard wrap lines; show red strip
set textwidth=80
set formatoptions+=t
set cc=+1
set wrap

" Use system clipboard
set clipboard=unnamed
